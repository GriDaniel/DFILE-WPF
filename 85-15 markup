<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Animation Demo" Height="200" Width="500">
    
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="85*"/>
            <ColumnDefinition Width="15*"/>
        </Grid.ColumnDefinitions>
        
        <!-- Progress Bar (85%) -->
        <Grid Grid.Column="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            
            <!-- Progress Bar -->
            <Border Grid.Column="0" Margin="3" BorderBrush="#AAA" BorderThickness="1">
                <Grid>
                    <Rectangle x:Name="ProgressBackground" Fill="#EEE"/>
                    <Rectangle x:Name="ProgressIndicator" Fill="#4C8BF5" HorizontalAlignment="Left" Width="0"/>
                    <TextBlock x:Name="ProgressText" HorizontalAlignment="Center" VerticalAlignment="Center" Text="0%"/>
                </Grid>
            </Border>
            
            <!-- Timer Display -->
            <TextBlock x:Name="TimeDisplay" 
                       Grid.Column="1" 
                       Text="00:00:05" 
                       VerticalAlignment="Center" 
                       Margin="5,0,10,0"
                       FontFamily="Consolas"/>
        </Grid>
        
        <!-- Battery Bar (15%) -->
        <Border Grid.Column="1" Margin="3">
            <Rectangle x:Name="BatteryBar" Fill="#77DD77" Width="10" HorizontalAlignment="Center"/>
        </Border>
    </Grid>
</Window>

using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Threading;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        // Timer fields
        private DispatcherTimer _timer;
        private TimeSpan _currentTime;
        private TimeSpan _totalTime;
        
        // Battery fields
        private int _batteryState = 0;
        private readonly Color[] _batteryColors = { Colors.Red, Colors.Yellow, Colors.Green };
        private readonly double[] _batteryHeights = { 0.2, 0.6, 1.0 };
        private DispatcherTimer _batteryTimer;
        
        public MainWindow()
        {
            InitializeComponent();
            
            // Initialize brushes
            ProgressIndicator.Fill = new SolidColorBrush(Colors.DodgerBlue);
            BatteryBar.Fill = new SolidColorBrush(Colors.LightGreen);
            
            // Start when window loads
            Loaded += (s, e) => {
                InitProgressAnimation();
                InitBatteryAnimation();
            };
        }
        
        private void InitProgressAnimation()
        {
            // Parse initial time (00:00:05)
            _totalTime = TimeSpan.FromSeconds(5);
            _currentTime = _totalTime;
            
            // Setup timer
            _timer = new DispatcherTimer {
                Interval = TimeSpan.FromMilliseconds(100)
            };
            _timer.Tick += (s, e) => {
                // Decrease time
                _currentTime = _currentTime.Subtract(TimeSpan.FromMilliseconds(100));
                
                // Reset if zero
                if (_currentTime.TotalMilliseconds <= 0)
                    _currentTime = _totalTime;
                
                // Update display
                TimeDisplay.Text = _currentTime.ToString(@"hh\:mm\:ss");
                
                // Update progress bar
                double progress = 100 - (_currentTime.TotalMilliseconds / _totalTime.TotalMilliseconds * 100);
                if (ProgressBackground.ActualWidth > 0)
                {
                    ProgressIndicator.Width = progress * ProgressBackground.ActualWidth / 100;
                    ProgressText.Text = $"{Math.Round(progress)}%";
                }
            };
            _timer.Start();
        }
        
        private void InitBatteryAnimation()
        {
            _batteryTimer = new DispatcherTimer {
                Interval = TimeSpan.FromSeconds(2)
            };
            _batteryTimer.Tick += (s, e) => {
                // Cycle through states
                _batteryState = (_batteryState + 1) % 3;
                
                // Get container height
                FrameworkElement parent = BatteryBar.Parent as FrameworkElement;
                double containerHeight = parent?.ActualHeight ?? 100;
                
                // Animation storyboards
                Storyboard colorStoryboard = new Storyboard();
                Storyboard heightStoryboard = new Storyboard();
                
                // Color animation
                ColorAnimation colorAnim = new ColorAnimation {
                    To = _batteryColors[_batteryState],
                    Duration = TimeSpan.FromSeconds(0.5)
                };
                Storyboard.SetTarget(colorAnim, BatteryBar);
                Storyboard.SetTargetProperty(colorAnim, new PropertyPath("Fill.Color"));
                colorStoryboard.Children.Add(colorAnim);
                
                // Height animation
                DoubleAnimation heightAnim = new DoubleAnimation {
                    To = containerHeight * _batteryHeights[_batteryState],
                    Duration = TimeSpan.FromSeconds(0.5)
                };
                Storyboard.SetTarget(heightAnim, BatteryBar);
                Storyboard.SetTargetProperty(heightAnim, new PropertyPath(FrameworkElement.HeightProperty));
                heightStoryboard.Children.Add(heightAnim);
                
                // Begin animations
                colorStoryboard.Begin(this);
                heightStoryboard.Begin(this);
            };
            _batteryTimer.Start();
        }
        
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            // Stop timers
            _timer?.Stop();
            _batteryTimer?.Stop();
            base.OnClosing(e);
        }
    }
}
