using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Threading;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer _timer;
        private TimeSpan _totalTime;
        private DateTime _countdownStartTime;
        private int _lastDisplayedSeconds;

        private int _batteryState = 0;
        private readonly Color[] _batteryColors = { Colors.Red, Colors.Yellow, Colors.Green };
        private readonly double[] _batteryHeights = { 0.2, 0.6, 1.0 };
        private DispatcherTimer _batteryTimer;

        public MainWindow()
        {
            InitializeComponent();

            ProgressIndicator.Fill = new SolidColorBrush(Colors.DodgerBlue);
            BatteryBar.Fill = new SolidColorBrush(Colors.LightGreen);

            Loaded += (s, e) =>
            {
                InitProgressAnimation();
                InitBatteryAnimation();
            };
        }

        private void InitProgressAnimation()
        {
            _totalTime = TimeSpan.FromSeconds(5);
            // Initial setup for the very first countdown
            _countdownStartTime = DateTime.UtcNow;
            _lastDisplayedSeconds = (int)Math.Ceiling(_totalTime.TotalSeconds);
            TimeDisplay.Text = TimeSpan.FromSeconds(_lastDisplayedSeconds).ToString(@"hh\:mm\:ss");
            UpdateProgressBar(0);

            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromMilliseconds(20)
            };

            _timer.Tick += (s, e) =>
            {
                TimeSpan elapsedSinceCycleStart = DateTime.UtcNow - _countdownStartTime;
                TimeSpan currentTimeRemaining = _totalTime - elapsedSinceCycleStart;

                if (currentTimeRemaining.TotalMilliseconds <= 0)
                {
                    // Display final state of the completed cycle
                    TimeDisplay.Text = "00:00:00";
                    UpdateProgressBar(100);

                    // Immediately reset and display the initial state for the new cycle
                    _countdownStartTime = DateTime.UtcNow;
                    _lastDisplayedSeconds = (int)Math.Ceiling(_totalTime.TotalSeconds); // e.g., 5
                    TimeDisplay.Text = TimeSpan.FromSeconds(_lastDisplayedSeconds).ToString(@"hh\:mm\:ss"); // Set to "00:00:05"
                    UpdateProgressBar(0); // Reset progress to 0%
                }
                else
                {
                    double progress = (elapsedSinceCycleStart.TotalMilliseconds / _totalTime.TotalMilliseconds) * 100.0;
                    progress = Math.Max(0, Math.Min(100, progress));
                    UpdateProgressBar(progress);

                    int secondsToDisplay = (int)Math.Ceiling(currentTimeRemaining.TotalSeconds);
                    if (_lastDisplayedSeconds != secondsToDisplay)
                    {
                        TimeDisplay.Text = TimeSpan.FromSeconds(secondsToDisplay).ToString(@"hh\:mm\:ss");
                        _lastDisplayedSeconds = secondsToDisplay;
                    }
                }
            };
            _timer.Start();
        }

        private void UpdateProgressBar(double progress)
        {
            if (ProgressBackground.ActualWidth > 0)
            {
                ProgressIndicator.Width = progress * ProgressBackground.ActualWidth / 100.0;
                ProgressText.Text = $"{Math.Round(progress)}%";
            }
        }

        private void InitBatteryAnimation()
        {
            _batteryTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(2)
            };
            _batteryTimer.Tick += (s, e) =>
            {
                _batteryState = (_batteryState + 1) % 3;
                double containerHeight = BatteryContainer.ActualHeight;

                Storyboard colorStoryboard = new Storyboard();
                ColorAnimation colorAnim = new ColorAnimation
                {
                    To = _batteryColors[_batteryState],
                    Duration = TimeSpan.FromSeconds(0.5)
                };
                Storyboard.SetTarget(colorAnim, BatteryBar);
                Storyboard.SetTargetProperty(colorAnim, new PropertyPath("(Shape.Fill).(SolidColorBrush.Color)"));
                colorStoryboard.Children.Add(colorAnim);
                colorStoryboard.Begin(this);

                BatteryBar.Height = containerHeight * _batteryHeights[_batteryState];
            };
            _batteryTimer.Start();
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            _timer?.Stop();
            _batteryTimer?.Stop();
            base.OnClosing(e);
        }
    }
}
