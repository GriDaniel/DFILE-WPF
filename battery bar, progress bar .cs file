using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Threading;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer _timer;
        private TimeSpan _currentTime;
        private TimeSpan _totalTime;
        
        private int _batteryState = 0;
        private readonly Color[] _batteryColors = { Colors.Red, Colors.Yellow, Colors.Green };
        private readonly double[] _batteryHeights = { 0.2, 0.6, 1.0 };
        private DispatcherTimer _batteryTimer;
        
        public MainWindow()
        {
            InitializeComponent();
            
            ProgressIndicator.Fill = new SolidColorBrush(Colors.DodgerBlue);
            BatteryBar.Fill = new SolidColorBrush(Colors.LightGreen);
            
            Loaded += (s, e) => {
                InitProgressAnimation();
                InitBatteryAnimation();
            };
        }
        
        private void InitProgressAnimation()
        {
            // 5-second countdown timer
            _totalTime = TimeSpan.FromSeconds(5);
            _currentTime = _totalTime;
            
            _timer = new DispatcherTimer {
                Interval = TimeSpan.FromMilliseconds(100)
            };
            _timer.Tick += (s, e) => {
                _currentTime = _currentTime.Subtract(TimeSpan.FromMilliseconds(100));
                
                if (_currentTime.TotalMilliseconds <= 0)
                    _currentTime = _totalTime;
                
                TimeDisplay.Text = _currentTime.ToString(@"hh\:mm\:ss");
                
                // Convert time to progress percentage
                double progress = 100 - (_currentTime.TotalMilliseconds / _totalTime.TotalMilliseconds * 100);
                if (ProgressBackground.ActualWidth > 0)
                {
                    ProgressIndicator.Width = progress * ProgressBackground.ActualWidth / 100;
                    ProgressText.Text = $"{Math.Round(progress)}%";
                }
            };
            _timer.Start();
        }
        
        private void InitBatteryAnimation()
        {
            _batteryTimer = new DispatcherTimer {
                Interval = TimeSpan.FromSeconds(2)
            };
            _batteryTimer.Tick += (s, e) => {
                // Cycle through 3 states: red/low, yellow/medium, green/high
                _batteryState = (_batteryState + 1) % 3;
                
                double containerHeight = BatteryContainer.ActualHeight;
                
                // Animate the battery bar color
                Storyboard colorStoryboard = new Storyboard();
                ColorAnimation colorAnim = new ColorAnimation {
                    To = _batteryColors[_batteryState],
                    Duration = TimeSpan.FromSeconds(0.5)
                };
                Storyboard.SetTarget(colorAnim, BatteryBar);
                Storyboard.SetTargetProperty(colorAnim, new PropertyPath("(Shape.Fill).(SolidColorBrush.Color)"));
                colorStoryboard.Children.Add(colorAnim);
                colorStoryboard.Begin(this);
                
                // Direct height change (can't animate Rectangle.Height property)
                BatteryBar.Height = containerHeight * _batteryHeights[_batteryState];
            };
            _batteryTimer.Start();
        }
        
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            _timer?.Stop();
            _batteryTimer?.Stop();
            base.OnClosing(e);
        }
    }
}
